name: IoT Module Development

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
      module:
        required: true
        type: string
    secrets:
      DEPLOY_TOKEN_COURIER:
        required: true
      DEV_CONTAINER_REGISTRY_PASSWORD:
        required: true
      PROD_CONTAINER_REGISTRY_PASSWORD:
        required: true

jobs:
  versioning:
    name: Short SHA Versioning
    runs-on: self-hosted
    steps:
    - name: Get Short SHA
      id: get-short-sha
      uses: synthetik-technologies/actions/composites/sha-versioning@2-separate-versioning-and-docker-building
    outputs:
      version: ${{ steps.get-short-sha.outputs.version }}
  
  docker-build-push:
    name: Build and Push Docker Image
    runs-on: [self-hosted, docker, ARM64]
    needs: [versioning]
    steps:
      - name: Add SSH deployment key 
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.DEPLOY_TOKEN_COURIER }}
      - name: Log into develop container registry
        uses: docker/login-action@v1
        with:
          registry: synthetikdev.azurecr.io
          username: synthetikDev
          password: ${{ secrets.DEV_CONTAINER_REGISTRY_PASSWORD }}
      - name: Log into production container registry
        uses: docker/login-action@v1
        with:
          registry: synthetik.azurecr.io
          username: synthetik
          password: ${{ secrets.PROD_CONTAINER_REGISTRY_PASSWORD }}
      - name: Build and push image
        uses: synthetik-technologies/actions/composites/docker-build-push@2-separate-versioning-and-docker-building
        with:
          image-name: ${{ inputs.image }}
          registry: synthetikdev.azurecr.io/
          version: ${{ needs.versioning.outputs.version }}
          registry-password: ${{ secrets.DEV_CONTAINER_REGISTRY_PASSWORD }}
          supporting-ssh-key: ${{ secrets.DEPLOY_TOKEN_COURIER }}
  prepare-deployment-name:
    runs-on: ubuntu-latest
    outputs:
      deploymentName: ${{ steps.create-deployment-name.outputs.deploymentName }}
    steps:
      - name: Create Deployment Name
        id: create-deployment-name
        run: |
          deploymentName="${{inputs.module}}-${{github.ref_name}}"
          #* set name to lowercase, replace slash with underscore
          formattedName=$(echo $deploymentName | tr '/' '_' | tr '[:upper:]' '[:lower:]')
          echo "::set-output name=deploymentName::$formattedName"