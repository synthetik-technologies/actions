name: IoT Module Development

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
      module:
        required: true
        type: string
    secrets:
      DEPLOY_TOKEN_COURIER:
        required: true
      DEV_CONTAINER_REGISTRY_PASSWORD:
        required: true
      PROD_CONTAINER_REGISTRY_PASSWORD:
        required: true

jobs:
  versioning:
    name: Short SHA Versioning
    runs-on: self-hosted
    steps:
    - name: Get Short SHA
      id: get-short-sha
      uses: synthetik-technologies/actions/composites/sha-versioning@2-separate-versioning-and-docker-building
    outputs:
      version: ${{ steps.get-short-sha.outputs.version }}
  
  docker-build-push:
    name: Build and Push Docker Image
    runs-on: [self-hosted, docker, ARM64]
    needs: [versioning]
    steps:
      - name: Add SSH deployment key 
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.DEPLOY_TOKEN_COURIER }}
      - name: Log into develop container registry
        uses: docker/login-action@v1
        with:
          registry: synthetikdev.azurecr.io
          username: synthetikDev
          password: ${{ secrets.DEV_CONTAINER_REGISTRY_PASSWORD }}
      - name: Log into production container registry
        uses: docker/login-action@v1
        with:
          registry: synthetik.azurecr.io
          username: synthetik
          password: ${{ secrets.PROD_CONTAINER_REGISTRY_PASSWORD }}
      - name: Build and push image
        uses: synthetik-technologies/actions/composites/docker-build-push@2-separate-versioning-and-docker-building
        with:
          image-name: ${{ inputs.image }}
          registry: synthetikdev.azurecr.io/
          version: ${{ needs.versioning.outputs.version }}
          registry-password: ${{ secrets.DEV_CONTAINER_REGISTRY_PASSWORD }}
          supporting-ssh-key: ${{ secrets.DEPLOY_TOKEN_COURIER }}
  
  prepare-deployment-name:
    name: Create Deployment Name
    runs-on: ubuntu-latest
    outputs:
      deploymentName: ${{ steps.create-deployment-name.outputs.deploymentName }}
    steps:
      - name: Create Deployment Name
        id: create-deployment-name
        run: |
          deploymentName="${{inputs.module}}-PR_${{github.event.pull_request.number}}"
          #* set name to lowercase, replace slash with underscore
          formattedName=$(echo $deploymentName | tr '/' '_' | tr '[:upper:]' '[:lower:]')
          echo "::set-output name=deploymentName::$formattedName"
  
  find-assigned-devices:
    runs-on: ubuntu-latest
    steps:
    - name: Get Assigned Test Devices
      id: get-assigned-test-devices
      run: |
        labels="${{ join(github.event.pull_request.labels.*.name, ', ') }}"
        devices=()
        for label in ${labels//,/ } #* split labels by comma and space, iterate over
        do
          if [[ "$label" == "dev_id"* ]] #* if label is for a device
          then
            device=$(echo $label | cut -d ':' -f 2) #* split by colon and get the second part
            devices+=(deviceId=\'$device\' OR ) #* add to array with 'or' for IoT deployment
          fi
        done
        unset devices[-1] || echo 0
        echo "::set-output name=devices::$(echo ${devices[@]})"
    outputs:
      devices: ${{ steps.get-assigned-test-devices.outputs.devices }}

  create-deployment-layer-for-testing:
    runs-on: ubuntu-latest
    needs: [versioning]
    outputs: 
      updatedManifest: ${{steps.filter-manifest.outputs.manifest}}
    steps:
    - run: az extension add --name azure-iot
    - name: Get Base Deployment
      id: get-base-deployment
      run: |
        deployment=$(az iot edge deployment show -d dev-stable -l "${{ secrets.SYNTHETIKDEV_UVIS_IOT_HUB_CSTRING }}")
        echo $deployment
        echo "::set-output name=deployment::$(echo $deployment)"
          
    - name: Filter Manifest
      id: filter-manifest
      run: |
        moduleManifest=$(echo '${{ steps.get-base-deployment.outputs.deployment }}' | jq '.content.modulesContent."$edgeAgent"["properties.desired.modules.${{ inputs.module }}"]')
        updatedManifest=$(echo "$moduleManifest" | jq '.settings.image="synthetikdev.azurecr.io/${{ inputs.image }}:${{ needs.versioning.outputs.version }}"') #TODO: handle elsewhere
        echo "::set-output name=manifest::$(echo $updatedManifest)"

  delete-previous-deployment:
    name: Delete Previous Deployment Layer
    runs-on: ubuntu-latest
    needs:
      - create-deployment-layer-for-testing
      - docker-build-push
      - prepare-deployment-name
      - find-assigned-devices
    steps:
      - name: Delete Previous Deployment
        continue-on-error: true #* Don't fail if a deployment doesn't exist
        id: delete-previous-deployment
        run: |
          az extension add --name azure-iot
          az iot edge deployment delete -l "${{ secrets.SYNTHETIKDEV_UVIS_IOT_HUB_CSTRING }}" -d "${{ needs.prepare-deployment-name.outputs.deploymentName }}"

  upload-deployment-layer:
    name: Upload Deployment Layer
    runs-on: ubuntu-latest
    needs:
      - create-deployment-layer-for-testing
      - prepare-deployment-name
      - find-assigned-devices
      - docker-build-push
      - delete-previous-deployment
    steps:
    - run: az extension add --name azure-iot
    - name: Push Layered Manifest #! switch to pr name (must be formatted)
      uses: synthetik-technologies/actions/composites/iot-deployment-layer@2-separate-versioning-and-docker-building
      with:
        deployment-name: ${{ needs.prepare-deployment-name.outputs.deploymentName }}
        layered: "true"
        priority: "10"
        devices: ${{ needs.find-assigned-devices.outputs.devices }}
        module-name: ${{ inputs.module }}
        connection-string: "${{ secrets.SYNTHETIKDEV_UVIS_IOT_HUB_CSTRING }}"
        labels: "{'build': 'ci-cd', 'module': '${{ inputs.module }}', 'pull-request': '${{ github.events.pull_request.title }}', 'url': '${{ github.events.pull_request.html_url }}', }"
        deployment-manifest: ${{ needs.create-deployment-layer-for-testing.outputs.updatedManifest }}