name: IoT Module Development

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
      module:
        required: true
        type: string
      image-registry:
        required: true
        type: string

jobs:
  versioning:
    if: github.event.action != 'labeled' && github.event.action != 'unlabeled'
    name: Short SHA Versioning
    runs-on: ubuntu-latest
    steps:
    - name: Get Short SHA
      id: get-short-sha
      uses: synthetik-technologies/actions/composites/sha-versioning@2-separate-versioning-and-docker-building
    - name: Print Image
      run: |
        echo "### Docker Image Name" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.get-short-sha.outputs.image-name }}" >> $GITHUB_STEP_SUMMARY
    outputs:
      version: ${{ steps.get-short-sha.outputs.version }}
  
  docker-build-push:
    name: Build and Push Docker Image
    runs-on: [self-hosted, docker, ARM64]
    needs: [versioning]
    steps:
      - name: Log Into Registries
        uses: synthetik-technologies/actions/composites/iot-docker-login@2-separate-versioning-and-docker-building
        with:
          deploy_token_courier: ${{ secrets.DEPLOY_TOKEN_COURIER }}
          dev_container_registry_password: ${{ secrets.DEV_CONTAINER_REGISTRY_PASSWORD }}
          prod_container_registry_password: ${{ secrets.PROD_CONTAINER_REGISTRY_PASSWORD }}
      - name: Build and push image
        uses: synthetik-technologies/actions/composites/docker-build-push@2-separate-versioning-and-docker-building
        with:
          image-name: ${{ inputs.image }}
          registry: ${{ inputs.image-registry }}
          version: ${{ needs.versioning.outputs.version }}
          registry-password: ${{ secrets.DEV_CONTAINER_REGISTRY_PASSWORD }}
          supporting-ssh-key: ${{ secrets.DEPLOY_TOKEN_COURIER }}
  
  prepare-deployment-name:
    name: Create Deployment Name
    runs-on: ubuntu-latest
    outputs:
      deploymentName: ${{ steps.create-deployment-name.outputs.deploymentName }}
    steps:
      - name: Create Deployment Name
        id: create-deployment-name
        run: |
          deploymentName="${{inputs.module}}-PR_${{github.event.pull_request.number}}"
          #* set name to lowercase, replace slash with underscore
          formattedName=$(echo $deploymentName | tr '/' '_' | tr '[:upper:]' '[:lower:]')
          echo "::set-output name=deploymentName::$formattedName"

  create-deployment-layer-for-testing:
    runs-on: [self-hosted, azure]
    needs: [versioning]
    outputs: 
      updatedManifest: ${{steps.filter-manifest.outputs.manifest}}
    steps:
    - name: Get Base Deployment
      id: get-base-deployment
      run: |
        deployment=$(az iot edge deployment show -d dev-stable -l "${{ secrets.SYNTHETIKDEV_UVIS_IOT_HUB_CSTRING }}")
        echo $deployment
        echo "::set-output name=deployment::$(echo $deployment)"
          
    - name: Filter Manifest
      id: filter-manifest
      run: |
        moduleManifest=$(echo '${{ steps.get-base-deployment.outputs.deployment }}' | jq '.content.modulesContent."$edgeAgent"["properties.desired"].modules.${{ inputs.module }}')
        updatedManifest=$(echo "$moduleManifest" | jq '.settings.image="${{ inputs.image-registry}}/${{ inputs.image }}:${{ needs.versioning.outputs.version }}"')
        echo "::set-output name=manifest::$(echo $updatedManifest)"

  upload-deployment-layer:
    name: Upload Deployment Layer
    runs-on: [self-hosted, azure]
    needs:
      - create-deployment-layer-for-testing
      - prepare-deployment-name
      - docker-build-push
    steps:
    - name: Remove Devices from Old Deployment
      continue-on-error: true
      id: rem-dev-from-dep
      run: az iot edge deployment update -d ${{ needs.prepare-deployment-name.outputs.deploymentName }}" -l "${{ secrets.SYNTHETIKDEV_UVIS_IOT_HUB_CSTRING }}" --set targetCondition=""
    - name: Delete Previous Deployment
      continue-on-error: true #* Don't fail if a deployment doesn't exist
      id: delete-previous-deployment
      run: az iot edge deployment delete -l "${{ secrets.SYNTHETIKDEV_UVIS_IOT_HUB_CSTRING }}" -d "${{ needs.prepare-deployment-name.outputs.deploymentName }}"
    - name: Push Layered Manifest
      uses: synthetik-technologies/actions/composites/iot-deployment-layer@2-separate-versioning-and-docker-building
      with:
        deployment-name: ${{ needs.prepare-deployment-name.outputs.deploymentName }}
        layered: "true"
        priority: "10"
        devices: ""
        module-name: ${{ inputs.module }}
        connection-string: "${{ secrets.SYNTHETIKDEV_UVIS_IOT_HUB_CSTRING }}"
        labels: "{'build': 'ci-cd', 'module': '${{ inputs.module }}', 'pull-request': '${{ github.events.pull_request.title }}', 'url': '${{ github.events.pull_request.html_url }}', }"
        deployment-manifest: ${{ needs.create-deployment-layer-for-testing.outputs.updatedManifest }}
